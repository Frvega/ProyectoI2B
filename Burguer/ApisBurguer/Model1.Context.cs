//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ApisBurguer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BurguesiadbEntities : DbContext
    {
        public BurguesiadbEntities()
            : base("name=BurguesiadbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tipoUsuarios> tipoUsuarios { get; set; }
        public virtual DbSet<usuarios> usuarios { get; set; }
        public virtual DbSet<listaBebidas> listaBebidas { get; set; }
        public virtual DbSet<listaComidas> listaComidas { get; set; }
        public virtual DbSet<promociones> promociones { get; set; }
        public virtual DbSet<promocionesContratadas> promocionesContratadas { get; set; }
        public virtual DbSet<proveedores> proveedores { get; set; }
    
        public virtual ObjectResult<spLogin_Result> spLogin(string user, string password, ObjectParameter puesto, ObjectParameter resultadoValidacion)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spLogin_Result>("spLogin", userParameter, passwordParameter, puesto, resultadoValidacion);
        }
    
        public virtual ObjectResult<listarBebidas_Result> listarBebidas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listarBebidas_Result>("listarBebidas");
        }
    
        public virtual ObjectResult<listarComidas_Result> listarComidas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listarComidas_Result>("listarComidas");
        }
    
        public virtual ObjectResult<listarPromociones_Result> listarPromociones()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<listarPromociones_Result>("listarPromociones");
        }
    
        public virtual ObjectResult<contratarPromocion_Result> contratarPromocion(Nullable<int> idPromocion, string nombreCliente, string apellidoCliente, string direccionCliente, string telefonoCliente, string fechaPedido, string fechaEntrega)
        {
            var idPromocionParameter = idPromocion.HasValue ?
                new ObjectParameter("idPromocion", idPromocion) :
                new ObjectParameter("idPromocion", typeof(int));
    
            var nombreClienteParameter = nombreCliente != null ?
                new ObjectParameter("nombreCliente", nombreCliente) :
                new ObjectParameter("nombreCliente", typeof(string));
    
            var apellidoClienteParameter = apellidoCliente != null ?
                new ObjectParameter("apellidoCliente", apellidoCliente) :
                new ObjectParameter("apellidoCliente", typeof(string));
    
            var direccionClienteParameter = direccionCliente != null ?
                new ObjectParameter("direccionCliente", direccionCliente) :
                new ObjectParameter("direccionCliente", typeof(string));
    
            var telefonoClienteParameter = telefonoCliente != null ?
                new ObjectParameter("telefonoCliente", telefonoCliente) :
                new ObjectParameter("telefonoCliente", typeof(string));
    
            var fechaPedidoParameter = fechaPedido != null ?
                new ObjectParameter("fechaPedido", fechaPedido) :
                new ObjectParameter("fechaPedido", typeof(string));
    
            var fechaEntregaParameter = fechaEntrega != null ?
                new ObjectParameter("fechaEntrega", fechaEntrega) :
                new ObjectParameter("fechaEntrega", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<contratarPromocion_Result>("contratarPromocion", idPromocionParameter, nombreClienteParameter, apellidoClienteParameter, direccionClienteParameter, telefonoClienteParameter, fechaPedidoParameter, fechaEntregaParameter);
        }
    }
}
